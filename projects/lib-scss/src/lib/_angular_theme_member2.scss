//@use 'sass:map';
@use "@angular/material" as mat;
//@use '@angular/material/theming' as theming;
@use "./angular_theme_member2_override" as member2;

$my-typography: mat.define-typography-config(
  $font-family: Montserrat,
);

@include mat.core($my-typography);

$my-primary: mat.define-palette(mat.$red-palette, 600, 200, 800);
$my-accent: mat.define-palette(mat.$orange-palette, A200, A100, A400);
$my-warn: mat.define-palette(mat.$brown-palette, A200, A100, A400);

$my-theme: mat.define-light-theme(
  (
    color: (
      primary: $my-primary,
      accent: $my-accent,
      warn: $my-warn,
    ),
  )
);

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($my-theme);

// Emit styles for MatButton based on `$my-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.tabs-theme($my-theme);
@include mat.button-theme($my-theme);

@include member2.theme($my-theme);

//@include mat.ripple-theme($my-theme);
//@include mat.icon-theme($my-theme);
//@include mat.divider-theme($my-theme);

//$color-config:    mat.get-color-config($theme);
//$primary-palette: map.get($color-config, 'primary');
//$typography-config: mat.get-typography-config($theme);
//$my-font-family: mat.font-family($typography-config);

//$color-config:    mat.get-color-config($my-theme);
//$primary-palette: map.get($color-config, 'primary');
//$accent-palette:  map.get($color-config, 'accent');
//$warn-palette:    map.get($color-config, 'warn');
//$is-dark-theme:   map.get($color-config, 'is-dark');
//
//$color1: get-color-from-palette($primary-palette, text);

.mat-bottom-sheet-container.coupon2 {
  padding: 0;
  overflow-x: hidden;
  max-height: 90vh;
  border-radius: 7px 7px 0 0;
}
